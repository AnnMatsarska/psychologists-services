{"version":3,"file":"static/js/708.c5281dea.chunk.js","mappings":"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","sources":["webpack://psychologists-service/./src/components/PsychologistList/PsychologistList.module.css?0ef3","../node_modules/uuid/dist/esm-browser/rng.js","../node_modules/uuid/dist/esm-browser/native.js","../node_modules/uuid/dist/esm-browser/stringify.js","../node_modules/uuid/dist/esm-browser/v4.js","components/PsychologistList/PsychologistList.jsx","redux/psychologists/actions.js","pages/Psychologist/PsychologistPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"section\":\"PsychologistList_section__4Tzd+\",\"container\":\"PsychologistList_container__vYWsK\"};","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nlet getRandomValues;\nconst rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nexport default {\n  randomUUID\n};","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nexport function unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  if (native.randomUUID && !buf && !options) {\n    return native.randomUUID();\n  }\n\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return unsafeStringify(rnds);\n}\n\nexport default v4;","import css from './PsychologistList.module.css';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectPsychologists } from '../../redux/psychologists/slice';\nimport { fetchPsychologists } from '../../redux/psychologists/actions';\n\nexport const PsychologistList = () => {\n  const dispatch = useDispatch();\n  const psychologists = useSelector(selectPsychologists);\n\n  useEffect(() => {\n    dispatch(fetchPsychologists());\n  }, [dispatch]);\n\n  return (\n    <section className={css.section}>\n      <div className={css.container}>\n        <h1>Psychologists</h1>\n        <ul>\n          {psychologists.map(psychologist => (\n            <li key={psychologist.id}>\n              <h2>{psychologist.name}</h2>\n              <img src={psychologist.avatar_url} alt={psychologist.name} />\n              <p>Experience: {psychologist.experience}</p>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </section>\n  );\n};\n","import { setPsychologists } from './slice';\nimport { onValue, ref } from 'firebase/database';\nimport { db } from '../../firebase/config';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport const fetchPsychologists = () => dispatch => {\n  const unsubscribe = onValue(ref(db), snapshot => {\n    const data = snapshot.val();\n    const psychologistsArray = data ? Object.values(data)[0] : [];\n    const psychologistsWithId = psychologistsArray.map(psychologist => ({\n      ...psychologist,\n      id: uuidv4(),\n    }));\n    dispatch(setPsychologists(psychologistsWithId));\n  });\n\n  return () => {\n    unsubscribe();\n  };\n};\n","import { PsychologistList } from '../../components/PsychologistList/PsychologistList';\n\nconst PsychologistPage = () => {\n  return (\n    <>\n      <PsychologistList />\n    </>\n  );\n};\n\nexport default PsychologistPage;\n"],"names":["getRandomValues","randomUUID","crypto","bind","rnds8","Uint8Array","rng","Error","byteToHex","i","push","toString","slice","unsafeStringify","arr","offset","arguments","length","undefined","options","buf","native","rnds","random","PsychologistList","dispatch","useDispatch","psychologists","useSelector","selectPsychologists","useEffect","unsubscribe","onValue","ref","db","snapshot","data","val","psychologistsWithId","Object","values","map","psychologist","_objectSpread","id","uuidv4","setPsychologists","_jsx","className","css","children","_jsxs","name","src","avatar_url","alt","experience","_Fragment"],"sourceRoot":""}